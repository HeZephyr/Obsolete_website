(window.webpackJsonp=window.webpackJsonp||[]).push([[142],{498:function(e,t,a){"use strict";a.r(t);var r=a(0),s=Object(r.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"_1-初识docker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-初识docker"}},[e._v("#")]),e._v(" 1 初识Docker")]),e._v(" "),t("h3",{attrs:{id:"_1-1-docker开源项目"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-docker开源项目"}},[e._v("#")]),e._v(" 1.1 Docker开源项目")]),e._v(" "),t("p",[e._v("Docker是基于Go语言实现的云开源项目，诞生于2013年初，用于支持创建和使用 Linux容器。它的主要目标是“Build, Ship and Run Any App, Anywhere”，即通过对应用封装（Packaging）、分发（Deployment）、运行（Runtime）等生命管理，达到应用组件级别的 "),t("mark",[e._v("“一次封装、到处运行”")]),e._v(" 。这里的应用组件既可以是一个应用，也可以是一套数据库服务，甚至是一个操作系统或编译器。")]),e._v(" "),t("h3",{attrs:{id:"_1-2-linux容器技术"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-linux容器技术"}},[e._v("#")]),e._v(" 1.2 Linux容器技术")]),e._v(" "),t("p",[e._v("Docker引擎的基础是Linux容器（Linux Containers，LXC）技术。容器则是有效地将由单个操作系统管理的资源划分到孤立的组中，以便更好地在孤立间平衡有冲突的资源使用需求，而LXC项目则是借助容器设计理念，并基于一系列新的内核特性实现了更具有扩展性的虚拟化容器方案。更关键的是，LXC被集成到了主流Linux内核中，进而成为Linux系统轻量级容器技术的事实标准。\n那么在LXC的基础上，Docker进一步优化了容器的使用体验。Docker提供了各种容器管理工具（如分发、版本、移植等）让用户无需关注底层的操作，可以简单明了管理和使用容器。用户操作Docker容器就像操作一个轻量级的虚拟机那样简单。")]),e._v(" "),t("p",[e._v("我们可以将Docker容器理解为一种沙盒，每个容器运行一个应用，不同的容器相互隔离，容器之间也可以建立通信机制。容器的创建和停止都十分迅速，容器自身对资源的需求也十分有限，远远低于虚拟机。很多时候，甚至将容器比作是应用本身也没有问题。")]),e._v(" "),t("h3",{attrs:{id:"_1-3-为什么要使用docker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-为什么要使用docker"}},[e._v("#")]),e._v(" 1.3 为什么要使用Docker")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("Docker容器虚拟化")]),e._v("\n举个简单的应用场景的例子，假设用户试图基于最常用的LAMP（Linux+Apache+MySQL+PHP）组合来运维一个网站。按照最传统的做法，首先需要安装Apache、Mysql和PHP以及它们各自运行所依赖的环境；之后分别对它们进行配置。经过大量操作后，然后还需要进行功能测试，看是否工作正常；如果不正常，则意味着更多的时间代价和不可控的风险。可以想象，如果再加上更多的应用，事情会变得更加难以处理。更为可怕的是，如果需要进行服务器迁移，如从腾讯云迁移到阿里云，往往需要重新部署和调试。"),t("mark",[e._v("而Docker提供了一种更为聪明的方式，通过容器来打包应用，意味着迁移只需要再服务器上启动需要的容器就可以了，节约大量的宝贵时间，并降低部署过程中出现问题的风险。")])]),e._v(" "),t("li",[t("strong",[e._v("Docker在开发和运维的优势")]),e._v("\nDocker可以在任何环境、任意时间让应用正常运行。在开发和运维中有4大优势：更快速的交付和部署；更高效的资源利用；更轻松的迁移和扩展；更简单的更新管理。")]),e._v(" "),t("li",[t("strong",[e._v("Docker与虚拟机的比较")])])]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("特性")]),e._v(" "),t("th",[e._v("容器")]),e._v(" "),t("th",[e._v("虚拟机")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("启动速度")]),e._v(" "),t("td",[e._v("秒级")]),e._v(" "),t("td",[e._v("分钟级")])]),e._v(" "),t("tr",[t("td",[e._v("硬盘使用")]),e._v(" "),t("td",[e._v("一般为MB")]),e._v(" "),t("td",[e._v("一般为GB")])]),e._v(" "),t("tr",[t("td",[e._v("性能")]),e._v(" "),t("td",[e._v("接近原生")]),e._v(" "),t("td",[e._v("弱于")])]),e._v(" "),t("tr",[t("td",[e._v("系统支持量")]),e._v(" "),t("td",[e._v("单机支持上千个容器")]),e._v(" "),t("td",[e._v("一般为几十个")])]),e._v(" "),t("tr",[t("td",[e._v("隔离性")]),e._v(" "),t("td",[e._v("安全隔离")]),e._v(" "),t("td",[e._v("完全隔离")])])])]),e._v(" "),t("h3",{attrs:{id:"_1-4-docker的核心概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-docker的核心概念"}},[e._v("#")]),e._v(" 1.4 Docker的核心概念")]),e._v(" "),t("p",[e._v("Docker有三大核心概念，如果我们理解了这三个核心概念，就能顺利理解Docker的整个生命周期。")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("镜像（Image）")]),e._v("\nDocker镜像（Image）类似于虚拟机镜像，可以理解为一个面向Docker引擎的只读模板，包含了文件系统。例如一个镜像可以只包含一个完整的Ubuntu操作系统环境，可以把它称为一个Ubuntu镜像。镜像也可以安装了Apache应用程序，可以把它称为一个Apache镜像。\n镜像是创建Docker容器的基础。通过版本管理和增量的文件系统，Docker提供了一套十分简单的机制来创建和更新现有的镜像，用户甚至可以从网上下载一个已经做好的应用镜像，并通过简单的命令就可以直接使用。")]),e._v(" "),t("li",[t("strong",[e._v("容器（Container）")]),e._v("\nDocker容器（Container）类似于一个轻量级的沙箱，Docker利用容器来运行和隔离应用。容器是从镜像创建的应用运行实例，可以将其启动、开始、停止、删除，而这些容器都是相互隔离、互不可见的。"),t("mark",[e._v("我们实际是可以将容器看作是一个简易版的Linux系统环境（包括root用户权限、进程空间、用户空间和网络空间等），以及运行在其中的应用程序打包而成的应用盒子。")]),e._v("\n镜像自身是只读的。容器从镜像启动的时候，Docker会在镜像的最上层创建一个可写层，镜像本身将保持不变。如果认为虚拟机是模拟运行的一整套操作系统（提供了运行态环境和其他系统环境）和跑在上面的应用，那么Docker容器就是独立运行的一个或一组应用，以及它们的必需运行环境。")]),e._v(" "),t("li",[t("strong",[e._v("仓库（Repository）")]),e._v("\nDocker仓库（Repository）类似于代码仓库，是Docker集中存放镜像文件的场所。而注册服务器（Registry）是存放仓库的地方，其上往往存放着多个仓库。每个仓库集中存放某一类镜像，往往包括多个镜像文件，通过不同的标签（tag）来进行区分。例如存放Ubuntu操作系统镜像的仓库，称为Ubuntu仓库，其中可能包括20.04等不同版本的镜像。根据所存储的镜像公开分享与否，Docker仓库可以分为公开仓库（Public）和私有仓库（Private）两种形式。目前，最大的公开仓库是Docker Hub，存放着数量庞大的镜像供用户下载，国内的公开仓库包括Docker Pool等，可提供稳定的国内访问。\n当然，用户如果不希望公开分享自己的镜像文件，Docker也支持用户在本地网络内创建一个只能自己访问的私有仓库。当用户创建了自己的镜像之后就可以使用push命令将它上传到指定的公有或者私有仓库。这样用户下次在另外一台机器上使用该镜像时，只需将其从仓库上pull下来就可以了。")])]),e._v(" "),t("h3",{attrs:{id:"_1-5-docker安装-linux"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-docker安装-linux"}},[e._v("#")]),e._v(" 1.5 Docker安装（Linux）")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://blog.csdn.net/hzf0701/article/details/122810614?spm=1001.2014.3001.5501",target:"_blank",rel:"noopener noreferrer"}},[e._v("安装教程"),t("OutboundLink")],1)]),e._v(" "),t("h2",{attrs:{id:"_2-镜像具体操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-镜像具体操作"}},[e._v("#")]),e._v(" 2 镜像具体操作")]),e._v(" "),t("h3",{attrs:{id:"_2-1-获取镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-获取镜像"}},[e._v("#")]),e._v(" 2.1 获取镜像")]),e._v(" "),t("p",[e._v("镜像是Docker运行容器的前提。使用"),t("code",[e._v("docker pull")]),e._v("命令即可从镜像仓库上下载指定镜像到本地。命令格式如下：\n"),t("code",[e._v("docker pull [options] NAME[:TAG]")]),e._v("\noptions参数说明：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("-a")]),e._v("：拉取所有tagged镜像")])]),e._v(" "),t("p",[e._v("例如从Docker Hub的Ubuntu仓库下载一个最新版的Ubuntu操作系统的镜像")]),e._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" pull ubuntu:20.04 "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 指定版本号，目前最新为20.04")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" pull ubuntu "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#该命令实际上下载的就是ubuntu:latest镜像。")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")]),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/ab1e7c77f32c4616a74bc49ee493b34f-20231125205158334.png",alt:"在这里插入图片描述"}})]),e._v(" "),t("p",[e._v("上面这两条命令实际上相当于"),t("code",[e._v("docker pull registry.hub.docker.com/ubuntu:latest")]),e._v("命令，即从默认的注册服务器registry.hub.docker.com中的ubuntu仓库来下载标记为latest的镜像。\n我们也可以选择其他注册服务器的仓库下载。那么这个时候我们需要在仓库前指定完整的仓库注册服务器地址。例如从Docker Pool社区的镜像源d1.dockerpool.com下载最新的ubuntu镜像。\n"),t("code",[e._v("docker pull d1.dockerpool.com:5000/ubuntu")])]),e._v(" "),t("h3",{attrs:{id:"_2-2-查看镜像信息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-查看镜像信息"}},[e._v("#")]),e._v(" 2.2 查看镜像信息")]),e._v(" "),t("p",[e._v("使用"),t("code",[e._v("docker images")]),e._v("命令可以列出本地主机上的所有镜像。命令格式如下：\n"),t("code",[e._v("docker images [options] [repository:[tag]]")]),e._v("\noptions参数说明：")]),e._v(" "),t("ul",[t("li",[e._v("-a :列出本地所有的镜像（含中间映像层，默认情况下，过滤掉中间映像层）；")]),e._v(" "),t("li",[e._v("-f :显示满足条件的镜像；")]),e._v(" "),t("li",[e._v("-q :只显示镜像ID。")])]),e._v(" "),t("p",[e._v("如果没有给出仓库名，那么默认列出本地主机上已有的镜像。我们使用"),t("code",[e._v("docker images")]),e._v("可以查看到如下信息：\n"),t("img",{attrs:{src:"https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/3e6c31e3a93b4d6a96177fcc77f098e1-20231125205547210.png",alt:"在这里插入图片描述"}}),e._v("\n可以看到几个字段信息：")]),e._v(" "),t("ul",[t("li",[e._v("repository：来自于哪个仓库，比如ubuntu仓库。")]),e._v(" "),t("li",[e._v("tag：镜像的标签信息，比如20.04或latest。用于标记来自同一个仓库的不同镜像。")]),e._v(" "),t("li",[t("mark",[e._v("image id：镜像的ID号，这个特别重要，唯一标识镜像。")])]),e._v(" "),t("li",[e._v("created：镜像创建时间。")]),e._v(" "),t("li",[e._v("size：镜像大小。")])]),e._v(" "),t("p",[e._v("我们从图中可以发现，20.04和latest标签的镜像ID是完全一致的，说明它们实际上指向了同一个镜像文件，只是别名不同而已。标签在这里起到了引用或者快捷方式的作用。\n我们使用"),t("code",[e._v("docker inpsect NAME|ID")]),e._v("即可查看该镜像的详细信息，为json格式。\n"),t("img",{attrs:{src:"https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/watermark%2Ctype_d3F5LXplbmhlaQ%2Cshadow_50%2Ctext_Q1NETiBAdW5pcXVlX3B1cnN1aXQ%3D%2Csize_18%2Ccolor_FFFFFF%2Ct_70%2Cg_se%2Cx_16-20231125205158576.png",alt:""}}),e._v("\n我们还可以使用"),t("code",[e._v("docker history")]),e._v("命令查看指定镜像的创建历史，命令格式如下：\n"),t("code",[e._v("docker history [options] IMAGE")]),e._v("\noptions说明：")]),e._v(" "),t("ul",[t("li",[e._v("-q :仅列出提交记录ID。")])]),e._v(" "),t("h3",{attrs:{id:"_2-3-搜寻镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-搜寻镜像"}},[e._v("#")]),e._v(" 2.3 搜寻镜像")]),e._v(" "),t("p",[e._v("使用"),t("code",[e._v("docker search")]),e._v("命令可以搜索云端仓库中共享的镜像，默认搜寻Docker Hub官方仓库的镜像。命令格式如下：\n"),t("code",[e._v("docker search [options] TERM")]),e._v("\noptions说明：")]),e._v(" "),t("ul",[t("li",[e._v("--automated :只列出 automated build类型的镜像；")]),e._v(" "),t("li",[e._v("--no-trunc :显示完整的镜像描述；")]),e._v(" "),t("li",[e._v("-f <过滤条件>:例如列出收藏数不小于指定值的镜像。")])]),e._v(" "),t("p",[e._v("例如搜寻带mysql关键字的镜像如下：\n"),t("img",{attrs:{src:"https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/watermark%2Ctype_d3F5LXplbmhlaQ%2Cshadow_50%2Ctext_Q1NETiBAdW5pcXVlX3B1cnN1aXQ%3D%2Csize_18%2Ccolor_FFFFFF%2Ct_70%2Cg_se%2Cx_16-20231125205254646.png",alt:""}})]),e._v(" "),t("h3",{attrs:{id:"_2-4-删除镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-删除镜像"}},[e._v("#")]),e._v(" 2.4 删除镜像")]),e._v(" "),t("p",[e._v("使用"),t("code",[e._v("docker rmi")]),e._v("命令可以删除镜像，命令格式如下：\n"),t("code",[e._v("docker rmi IMAGE [IMAGE...]")]),e._v("\n其中IMAGE可以为镜像标签或者镜像ID，这ID可以为能进行区分的部分前缀串。\n需要注意的是，当有该镜像创建的容器存在时，镜像文件时默认无法删除的，若想要强行删除文件则需要加入"),t("code",[e._v("-f")]),e._v("参数来强制删除一个存在容器依赖的镜像，但这样往往会造成一些遗留问题。正确的做法应该是先删除依赖该镜像的所有容器，再来删除镜像。\n若要删除所有镜像，可用"),t("code",[e._v("docker images -q")]),e._v("列出所有的ID，正确命令为："),t("code",[e._v("docker rmi $(docker images -q)")]),e._v("。")]),e._v(" "),t("h3",{attrs:{id:"_2-5-创建镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-创建镜像"}},[e._v("#")]),e._v(" 2.5 创建镜像")]),e._v(" "),t("p",[e._v("创建镜像的方法有三种：基于已有镜像的容器创建、基于本地模板导入、基于Dockerfile创建。")]),e._v(" "),t("h4",{attrs:{id:"_2-5-1-基于已有镜像的容器创建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-1-基于已有镜像的容器创建"}},[e._v("#")]),e._v(" 2.5.1 基于已有镜像的容器创建")]),e._v(" "),t("p",[e._v("使用"),t("code",[e._v("docker commit")]),e._v("命令即可从容器创建一个镜像，命令格式如下：\n"),t("code",[e._v("docker commit [options] CONTAINER [REPOSITORY[:TAG]]")]),e._v("\noptions说明：")]),e._v(" "),t("ul",[t("li",[e._v("-a :提交的镜像作者；")]),e._v(" "),t("li",[e._v("-c :使用Dockerfile指令来创建镜像；")]),e._v(" "),t("li",[e._v("-m :提交时的说明文字；")]),e._v(" "),t("li",[e._v("-p :在commit时，将容器暂停。")])]),e._v(" "),t("p",[e._v("CONTAINER为容器ID。\n顺利的话，命令会返回新创建的镜像的ID信息。\n实例如下：\n"),t("code",[e._v('docker commit -a "pursuit" -m "my ubuntu" 3c61e963210c myubuntu:v1')])]),e._v(" "),t("h4",{attrs:{id:"_2-5-2-基于本地模板导入"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-2-基于本地模板导入"}},[e._v("#")]),e._v(" 2.5.2 基于本地模板导入")]),e._v(" "),t("p",[e._v("可以从一个操作系统模板文件导入一个镜像，也可以从网上下载一个模板。一般使用OpenVZ提供的模板来创建。"),t("a",{attrs:{href:"https://wiki.openvz.org/Download/template/precreated",target:"_blank",rel:"noopener noreferrer"}},[e._v("OpenVZ下载地址"),t("OutboundLink")],1),e._v("。\n首先下载一个，命令如下：\n"),t("code",[e._v("wget https://download.openvz.org/template/precreated/contrib/arch-20161108-x86_64.tar.gz")]),e._v(" "),t("img",{attrs:{src:"https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/watermark%2Ctype_d3F5LXplbmhlaQ%2Cshadow_50%2Ctext_Q1NETiBAdW5pcXVlX3B1cnN1aXQ%3D%2Csize_17%2Ccolor_FFFFFF%2Ct_70%2Cg_se%2Cx_16-20231125205158683.png",alt:""}})]),e._v(" "),t("p",[e._v("然后将导入该镜像：\n"),t("code",[e._v("cat arch-20161108-x86_64.tar.gz | docker import - arch:x86_64")]),e._v(" "),t("img",{attrs:{src:"https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/16984ce2669947c780175dfd0f3761a7-20231125205313788.png",alt:""}}),e._v("\n查看新导入的镜像，已经本地存在了：\n"),t("img",{attrs:{src:"https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/105f0e690da642019b2359c6264fe4f3-20231125205158769-20231125205317924.png",alt:""}})]),e._v(" "),t("h4",{attrs:{id:"_2-5-3-基于dockerfile创建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-3-基于dockerfile创建"}},[e._v("#")]),e._v(" 2.5.3 基于Dockerfile创建")]),e._v(" "),t("p",[e._v("其中Dockerfile是一个文本格式的配置文件，用户可以使用 Dockerfile 快速创建自定义的镜像。\nDockerfile由一行行命令语句组成，并且支持以"),t("code",[e._v("#")]),e._v("开头的注释。Dockerfile分为四部分：基础镜像信息、维护者信息、镜像操作指令和容器启动时执行指令。例如下面的文件模板：")]),e._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# This dockerfile user the ubuntu image")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# VERSION 2 - EDITON 1")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Author: docker_user")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Command format: Instruction [arguments / command] ..")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 第一行必须指定基于的基础镜像")]),e._v("\nFROM ubuntu\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 维护者信息")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 例如MAINTAINER  docker_user docker_user@email.com")]),e._v("\nMAINTAINER pursuit unique.hzf@gmail.com\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 镜像的操作指令")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# RUN <command>，当命令较长，可以用\\来换行。")]),e._v("\nRUN "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Hello, World!"')]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 容器启动时执行指令")]),e._v("\nCMD /bin/bash\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br")]),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br")])]),t("p",[e._v("创建好Dockerfile后，我们利用"),t("code",[e._v("docker build")]),e._v("命令，命令格式如下：\n"),t("code",[e._v("docker build -t PATH|URL repository:tag")]),e._v("\n如，我们利用Dockerfile生成镜像\n"),t("code",[e._v("sudo docker build . -t arch:x86_64_01")]),e._v("\n查看本地镜像如下：\n"),t("img",{attrs:{src:"https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/ee91502cb9374e1782f92fd75597df43-20231125205323651.png",alt:""}})]),e._v(" "),t("h3",{attrs:{id:"_2-6-存出和载入镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-存出和载入镜像"}},[e._v("#")]),e._v(" 2.6 存出和载入镜像")]),e._v(" "),t("p",[e._v("我们可以使用"),t("code",[e._v("docker save")]),e._v("和"),t("code",[e._v("docker load")]),e._v("命令来存出和载入镜像。 "),t("mark",[e._v("存出即将镜像保存成tar归档文件，载入即将使用"),t("code",[e._v("docker save")]),e._v("命令导出的tar归档文件载入称为镜像文件。")]),e._v(" 命令格式如下：")]),e._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" save "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-o")]),e._v(" filename IMAGE\n或者\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" save IMAGE"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("filename\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" load "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--input")]),e._v(" filename\n或者\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" load "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("filename\n\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br")]),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br")])]),t("p",[e._v("实例：\n"),t("code",[e._v("docker save -o files/ubuntu_20_04.tar ubuntu:20.04")]),e._v(" "),t("img",{attrs:{src:"https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/21e37193e1194d8aa1d15d6faa5b6f90-20231125205158807-20231125205328230.png",alt:""}}),e._v("\n然后我们需要删除ubuntu:20.04镜像，再导入。")]),e._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" rmi ubuntu:20.04\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" load "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("ubuntu_20_04.tar\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")]),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/4d05d52c678f40bca2061c4c0f4f21f5-20231125205453434.png",alt:""}})]),e._v(" "),t("h3",{attrs:{id:"_2-7-修改镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-7-修改镜像"}},[e._v("#")]),e._v(" 2.7 修改镜像")]),e._v(" "),t("p",[e._v("使用"),t("code",[e._v("docker tag")]),e._v("命令可以标记本地镜像，将其归入某一仓库。命令格式如下：\n"),t("code",[e._v("docker tag [OPTIONS] IMAGE[:TAG] [REGISTRYHOST/][USERNAME/]NAME[:TAG]")]),e._v("\n实例：\n"),t("code",[e._v("docker tag ubuntu:20.04 myubuntu/ubuntu:20.04")]),e._v(" "),t("img",{attrs:{src:"https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/6a80b40a10a24e198099bbdeadf210e6-20231125205333299.png",alt:""}})]),e._v(" "),t("h3",{attrs:{id:"_2-8-上传镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-8-上传镜像"}},[e._v("#")]),e._v(" 2.8 上传镜像")]),e._v(" "),t("p",[e._v("使用"),t("code",[e._v("docker push")]),e._v("命令将本地的镜像上传到镜像仓库，默认上传到DockerHub官方仓库。要先登陆到镜像仓库。命令格式如下：\n"),t("code",[e._v("docker push NAME[:TAG]")]),e._v("\n例如用户user上传自己的本地镜像ubuntu:20.04，需要注意的是我们需要添加新的标签"),t("code",[e._v("user/ubuntu:20.04")]),e._v("（其中user一定要和我们的dockerhub中用户名同名，否则会报错）然后再上传。\n"),t("img",{attrs:{src:"https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/d1f0f11bb5ae42a5ac1f85bc3903644f-20231125205340531.png",alt:""}}),e._v("\n之后，我们即可在DockerHub官网看到自己的仓库和上传的镜像了。\n"),t("img",{attrs:{src:"https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/watermark%2Ctype_d3F5LXplbmhlaQ%2Cshadow_50%2Ctext_Q1NETiBAdW5pcXVlX3B1cnN1aXQ%3D%2Csize_20%2Ccolor_FFFFFF%2Ct_70%2Cg_se%2Cx_16.png",alt:""}})]),e._v(" "),t("h2",{attrs:{id:"_3-容器具体操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-容器具体操作"}},[e._v("#")]),e._v(" 3 容器具体操作")]),e._v(" "),t("h3",{attrs:{id:"_3-1-查看容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-查看容器"}},[e._v("#")]),e._v(" 3.1 查看容器")]),e._v(" "),t("p",[e._v("使用"),t("code",[e._v("docker ps")]),e._v("命令即可列出容器，命令格式如下：\n"),t("code",[e._v("docker ps [OPTIONS]")]),e._v("\n其中options说明：")]),e._v(" "),t("ul",[t("li",[e._v("-a :显示所有的容器，包括未运行的。")]),e._v(" "),t("li",[e._v("-f :根据条件过滤显示的内容。")]),e._v(" "),t("li",[e._v("-q :静默模式，只显示容器编号。")])]),e._v(" "),t("p",[e._v("我们运行"),t("code",[e._v("docker ps -a")]),e._v("可以得到如图：\n"),t("img",{attrs:{src:"https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/af07e9a999dc4161954ff95877f47e00.png",alt:""}}),e._v("\n其中输出字段说明如下：")]),e._v(" "),t("ul",[t("li",[e._v("CONTAINER ID: 容器 ID。")]),e._v(" "),t("li",[e._v("IMAGE: 使用的镜像。")]),e._v(" "),t("li",[e._v("COMMAND: 启动容器时运行的命令。")]),e._v(" "),t("li",[e._v("CREATED: 容器的创建时间。")]),e._v(" "),t("li",[e._v("STATUS: 容器状态。")]),e._v(" "),t("li",[e._v("PORTS: 容器的端口信息和使用的连接类型（tcp\\udp）。")]),e._v(" "),t("li",[e._v("NAMES: 自动分配的容器名称。")])]),e._v(" "),t("p",[e._v("我们也可以使用"),t("code",[e._v("docker inspect")]),e._v("命令列出容器的元信息，输出格式为json格式，这个命令在查看镜像章节已经说明了，用法相同，这里不再叙述。")]),e._v(" "),t("p",[e._v("使用"),t("code",[e._v("docker stats")]),e._v("可以查看所有容器的统计信息，包括CPU、内存、存储、网络等信息。\n使用"),t("code",[e._v("docker top CONTAINER")]),e._v("可查看某个容器内的所有进程。")]),e._v(" "),t("h3",{attrs:{id:"_3-2-创建容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-创建容器"}},[e._v("#")]),e._v(" 3.2 创建容器")]),e._v(" "),t("p",[e._v("Docker的容器十分轻量级，用户可以随时创建或删除容器。")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("新建容器")]),e._v("\n可以使用"),t("code",[e._v("docker create")]),e._v("命令新建一个容器，例如：\n"),t("code",[e._v("docker create -it ubuntu:20.04")]),e._v("\n即利用镜像ubuntu:20.04创建容器。")]),e._v(" "),t("li",[t("strong",[e._v("新建并启动一个容器")]),e._v("\n使用"),t("code",[e._v("docker run")]),e._v("命令创建并启动容器。其命令格式如下：\n"),t("code",[e._v("docker run [OPTIONS] IMAGE [COMMAND] [ARG...]")]),e._v("\n其中options说明：\n1."),t("code",[e._v("--name")]),e._v("：为容器指定一个名称；\n2."),t("code",[e._v("-t")]),e._v(": 为容器重新分配一个伪输入终端，通常与 -i 同时使用；\n3."),t("code",[e._v("-d")]),e._v(":  后台运行容器，并返回容器ID。\n4."),t("code",[e._v("-i")]),e._v(": 以交互模式运行容器，通常与 -t 同时使用。\n当使用"),t("code",[e._v("docker")]),e._v("创建并启动容器时，Docker在后台运行的标准操作如下：\n1.检查本地是否有指定的镜像，不存在就从公有仓库下载;\n2.利用镜像创建并启动一个容器；\n3.分配一个文件系统，并在只读的镜像层外面挂载一层可读写层；\n4.从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去；\n5.从地址池配置一个IP地址给容器；\n6.执行用户指定的应用程序；\n7.执行完毕后容器被终止。\n下面这个实例将启动一个bash终端，允许用户进行交互，可以使用Linux命令。\n"),t("code",[e._v("docker run -it ubuntu:20.04 /bin/bash")]),e._v(" "),t("img",{attrs:{src:"https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/f28c825c687f4545b2f3a5966466051f.png",alt:""}}),e._v("\n其中root为用户名，@后面的为容器ID。我们用"),t("code",[e._v("ps")]),e._v("命令查看进程发现只运行了bash应用，并没有运行其他不需要的进程。可以使用Ctrl+d或输入"),t("code",[e._v("exit")]),e._v("命令来退出容器。当退出容器之后，该容器就自动处于终止状态了。 "),t("mark",[e._v("这是因为对于Docker容器来说，当运行的应用（此例子中为bash）退出后，容器也就没有再运行的必要了。")])])]),e._v(" "),t("h3",{attrs:{id:"_3-3-启动终止容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-启动终止容器"}},[e._v("#")]),e._v(" 3.3 启动终止容器")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("启动容器")]),e._v("\n使用"),t("code",[e._v("docker start")]),e._v("可以启动一个已存在的容器。命令格式如下：\n"),t("code",[e._v("docker start CONTAINER")])]),e._v(" "),t("li",[t("strong",[e._v("终止容器")]),e._v("\n使用"),t("code",[e._v("docker stop")]),e._v("可以启动一个已存在的容器。命令格式如下：\n"),t("code",[e._v("docker stop CONTAINER")])]),e._v(" "),t("li",[t("strong",[e._v("重启容器")]),e._v("\n使用"),t("code",[e._v("docker restart")]),e._v("可以启动一个已存在的容器。命令格式如下：\n"),t("code",[e._v("docker restart CONTAINER")])])]),e._v(" "),t("h3",{attrs:{id:"_3-4-获取容器的日志"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-获取容器的日志"}},[e._v("#")]),e._v(" 3.4 获取容器的日志")]),e._v(" "),t("p",[e._v("使用"),t("code",[e._v("docker logs")]),e._v("即可获取容器的日志。命令格式如下：\n"),t("code",[e._v("docker logs [OPTIONS] CONTAINER")]),e._v("\n其中OPTIONS说明：")]),e._v(" "),t("ul",[t("li",[e._v("-f : 跟踪日志输出")]),e._v(" "),t("li",[e._v("--since :显示某个开始时间的所有日志")]),e._v(" "),t("li",[e._v("-t : 显示时间戳")]),e._v(" "),t("li",[e._v("--tail :仅列出最新N条容器日志")])]),e._v(" "),t("p",[e._v("实例：\n"),t("img",{attrs:{src:"https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/467a19f61691409aaab21237f232399e.png",alt:""}})]),e._v(" "),t("h3",{attrs:{id:"_3-5-进入容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-进入容器"}},[e._v("#")]),e._v(" 3.5 进入容器")]),e._v(" "),t("p",[e._v("在使用"),t("code",[e._v("-d")]),e._v("参数后，容器启动后会自动进入后台，用户无法看到容器中的信息。我们如果需要进入容器进行操作，有多种方法，这里介绍两种。")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("使用"),t("code",[e._v("docker attach")])]),e._v("\n命令格式为："),t("code",[e._v("docker attach CONTAINER")]),e._v("\n在容器中，我们可以先按"),t("code",[e._v("Ctrl-p")]),e._v("，再按"),t("code",[e._v("Ctrl-q")]),e._v("可以挂起容器。\n但是使用attach命令有时候并不方便。当多个窗口同时attach到同一个容器的时候，所有窗口都会同步显示。当某个窗口因命令阻塞后，其他窗口也无法执行操作了。")]),e._v(" "),t("li",[t("strong",[e._v("使用"),t("code",[e._v("docker exec")]),e._v("命令")]),e._v("\nDocker自1.3版本起，提供了一个更方便的工具exec，该命令可以在运行的容器中执行命令，命令格式如下：\n"),t("code",[e._v("docker exec [OPTIONS] CONTAINER COMMAND [ARG...]")]),e._v("\n其中OPTIONS说明：\n1."),t("code",[e._v("-d")]),e._v(" :分离模式: 在后台运行\n2."),t("code",[e._v("-i")]),e._v(" :即使没有附加也保持STDIN 打开\n3."),t("code",[e._v("-t")]),e._v(" :分配一个伪终端")])]),e._v(" "),t("h3",{attrs:{id:"_3-6-删除容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-删除容器"}},[e._v("#")]),e._v(" 3.6 删除容器")]),e._v(" "),t("p",[e._v("可以使用"),t("code",[e._v("docker rm")]),e._v("命令来删除==处于终止状态的容器==，命令格式如下：\n"),t("code",[e._v("docker rm [OPTIONS] CONTAINER [CONTAINER...]")]),e._v("\n其中OPTIONS说明：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("-f")]),e._v(" :通过 SIGKILL 信号强制删除一个运行中的容器。")]),e._v(" "),t("li",[t("code",[e._v("-l")]),e._v(":移除容器间的网络连接，而非容器本身。即删除容器的连接，但保留容器。")]),e._v(" "),t("li",[t("code",[e._v("-v")]),e._v(" :删除与容器关联的卷。")])]),e._v(" "),t("p",[e._v("如果需要删除所有容器，可使用"),t("code",[e._v("docker rm $(docker ps -aq)")]),e._v("。")]),e._v(" "),t("h3",{attrs:{id:"_3-7-在本地和容器之间复制文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-7-在本地和容器之间复制文件"}},[e._v("#")]),e._v(" 3.7 在本地和容器之间复制文件")]),e._v(" "),t("p",[e._v("使用"),t("code",[e._v("docker cp")]),e._v("命令用于主机和容器之间的数据拷贝，命令格式如下：")]),e._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("cp")]),e._v(" xxx CONTAINER:xxx \n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("cp")]),e._v(" CONTAINER:xxx xxx\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")]),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("p",[e._v("实例：\n"),t("code",[e._v("docker cp data.txt 3c61e963210c:data.txt")]),e._v(" "),t("img",{attrs:{src:"https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/watermark%2Ctype_d3F5LXplbmhlaQ%2Cshadow_50%2Ctext_Q1NETiBAdW5pcXVlX3B1cnN1aXQ%3D%2Csize_16%2Ccolor_FFFFFF%2Ct_70%2Cg_se%2Cx_16-20231125205401570.png",alt:""}})]),e._v(" "),t("h3",{attrs:{id:"_3-8-修改容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-8-修改容器"}},[e._v("#")]),e._v(" 3.8 修改容器")]),e._v(" "),t("p",[e._v("使用"),t("code",[e._v("docker rename")]),e._v("可以重命名容器，命令格式如下：\n"),t("code",[e._v("docker rename CONTAINER1 CONTAINER2")]),e._v("\n使用"),t("code",[e._v("docker update")]),e._v("可以修改容器配置，命令格式如下：\n"),t("code",[e._v("docker update CONTAINER [options]")]),e._v("\n其中OPTIONS参数过多，使用的时候可以自行百度，例如我们修改容器的内存限制：\n"),t("code",[e._v("docker update 3c61e963210 --memory 500MB")])]),e._v(" "),t("h3",{attrs:{id:"_3-9-导入和导出容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-9-导入和导出容器"}},[e._v("#")]),e._v(" 3.9 导入和导出容器")]),e._v(" "),t("h4",{attrs:{id:"_3-9-1-导出容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-9-1-导出容器"}},[e._v("#")]),e._v(" 3.9.1 导出容器")]),e._v(" "),t("p",[e._v("导出容器是指导出一个已经创建的容器到一个文件，不管此时这个容器是否处于运行状态，可以使用"),t("code",[e._v("docker export")]),e._v("命令导出容器。该命令格式如下：")]),e._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("options"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" xxx.tar CONTAINER \n或者\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("options"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" CONTAINER"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("xxx.tar\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")]),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("p",[e._v("其中options说明：")]),e._v(" "),t("ul",[t("li",[e._v("-o :将输入内容写到文件。")])]),e._v(" "),t("p",[e._v("例如将id为3c61e963210的容器按日期保存为tar文件：\n"),t("img",{attrs:{src:"https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/262372ab59414028b53091c724139c29-20231125205408708.png",alt:""}}),e._v("\n可以将这些文件传输到其他的机器上，在其他机器上通过导入命令实现容器的迁移。")]),e._v(" "),t("h4",{attrs:{id:"_3-9-2-导入容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-9-2-导入容器"}},[e._v("#")]),e._v(" 3.9.2 导入容器")]),e._v(" "),t("p",[e._v("导出的文件又可以使用"),t("code",[e._v("docker import")]),e._v("命令导入，成为镜像，命令格式如下：\n"),t("code",[e._v("docker import [OPTIONS] xxx.tar image_name:tag")]),e._v("\n其中OPTIONS说明：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("-c")]),e._v(" :应用docker 指令创建镜像；")]),e._v(" "),t("li",[t("code",[e._v("-m")]),e._v(" :提交时的说明文字。")])]),e._v(" "),t("p",[e._v("实例：\n"),t("code",[e._v("docker import ubuntu-20220212.tar myubunt:latest")]),e._v(" "),t("img",{attrs:{src:"https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/fd4457a141224da88a6c87e130f17253-20231125205414592.png",alt:""}}),e._v("\n我们知道，前面我们学习过"),t("code",[e._v("docker load")]),e._v("命令来导入一个镜像文件。实际上，既可以使用"),t("code",[e._v("docker load")]),e._v("命令来导入镜像存储文件到本地的镜像库，也可以使用"),t("code",[e._v("docker import")]),e._v("命令来导入一个容器快照到本地镜像库。 "),t("mark",[e._v("这两者的区别在于容器快照文件将丢弃所有的历史记录和元信息（仅保存容器当时的快照状态)，，而镜像存储文件将保存完整记录，体积也要大。")])]),e._v(" "),t("h2",{attrs:{id:"_4-仓库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-仓库"}},[e._v("#")]),e._v(" 4 仓库")]),e._v(" "),t("h3",{attrs:{id:"_4-1-docker-hub"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-docker-hub"}},[e._v("#")]),e._v(" 4.1 Docker Hub")]),e._v(" "),t("h4",{attrs:{id:"_4-1-1-linux登录登出dockerhub"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-1-linux登录登出dockerhub"}},[e._v("#")]),e._v(" 4.1.1 Linux登录登出DockerHub")]),e._v(" "),t("p",[e._v("首先在"),t("a",{attrs:{href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("dockerhub官网"),t("OutboundLink")],1),e._v("注册一个账号，然后使用"),t("code",[e._v("docker login")]),e._v("即可登录。登出则直接输入"),t("code",[e._v("docker logout")]),e._v("即可。\n实例：\n"),t("img",{attrs:{src:"https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/63fac7bb71f2486dbccbc625fb1377ae-20231125205420218.png",alt:""}})]),e._v(" "),t("h4",{attrs:{id:"_4-1-2-基本操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-2-基本操作"}},[e._v("#")]),e._v(" 4.1.2 基本操作")]),e._v(" "),t("p",[e._v("用户无需登录即可通过"),t("code",[e._v("docker search")]),e._v("命令来查找官网仓库的镜像，并利用"),t("code",[e._v("docker pull")]),e._v("命令来将它下载到本地。\n根据是否为官方提供， 可将这些镜像资源分为两类。一种类似ubuntu这样的基础镜像，称为基础或根镜像。这些镜像是由Docker公司创建、验证、支持、提供的。这样的镜像往往使用单个单词作为名字。还有一种类型，比如pursuit/ubuntu镜像，它是由DockerHub用户pursuit创建并维护的，带有用户名称为前缀，表明是某用户的某仓库。可通过用户名称前缀user_name/ 来指定使用某个用户提供的镜像，比如pursuit用户的镜像前缀为pursuit/。")]),e._v(" "),t("h4",{attrs:{id:"_4-1-3-自动创建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-3-自动创建"}},[e._v("#")]),e._v(" 4.1.3 自动创建")]),e._v(" "),t("p",[e._v("自动创建（Automated Builds）功能对于需要经常升级镜像内程序来说十分方便。有时候，用户创建了镜像，安装了某个软件，如果软件发布新版本则需要手动更新镜像。\n而自动创建功能使得用户通过DockerHub指定追踪一个目标网站（目前支持Github或BitBucket）上的项目，一但发现项目新的提交，则自动执行创建。\n要配置自动创建，有如下步骤：\n1）创建并登录Docker Hub，以及目标网站； * 在目标网站中连接账户到Docker Hub。\n2）在Docker Hub中配置一个自动创建。\n3）选取一个目标网站中的项目（需要含Dockerfile）和分支。\n4）指定Dockerfile的位置，并提交创建。\n之后，就可以在DockerHub的”自动创建“页面跟踪每次创建的状态。")]),e._v(" "),t("h2",{attrs:{id:"_5-网络基础配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-网络基础配置"}},[e._v("#")]),e._v(" 5 网络基础配置")]),e._v(" "),t("h3",{attrs:{id:"_5-1-端口映射实现访问容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-端口映射实现访问容器"}},[e._v("#")]),e._v(" 5.1 端口映射实现访问容器")]),e._v(" "),t("p",[e._v("大量的互联网应用服务包括多个服务组件，这往往需要多个容器之间通过网络通信进行相互配合。Docker目前提供了映射容器端口到宿主主机和容器互联机制来为容器提供互联网服务。")]),e._v(" "),t("p",[e._v("在启动容器时，如果不指定对应参数，在容器外部是无法通过网络来访问容器内的网络应用和服务的。当容器中运行一些应用，要让外部访问这些应用时，可以通过"),t("code",[e._v("-p")]),e._v("参数来指定端口映射，并且，在一个指定的端口上只可以绑定一个容器。支持的格式有"),t("code",[e._v("ip:hostPort:containerPort")]),e._v("、"),t("code",[e._v("ip::containerPort")]),e._v("、"),t("code",[e._v("hostPort:containerPort")]),e._v("。")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("映射所有接口地址")]),e._v("\n使用"),t("code",[e._v("hostPort:containerPort")]),e._v("格式将本地的4000端口映射到容器的4000端口，可以执行如下命令：\n"),t("code",[e._v("docker run -itd -p 4000:4000 --name my_docker_ubuntu ubuntu:20.04")]),e._v(" "),t("img",{attrs:{src:"https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/7bd5077670794fd096686c078bbc40b8.png",alt:""}}),e._v("\n我们可以看到，已经实现了端口映射。多次使用"),t("code",[e._v("-p")]),e._v("标记可以绑定多个端口。例如：\n"),t("code",[e._v("docker run -itd -p 4000:4000 -p 3000:3000 --name my_docker_ubuntu ubuntu:20.04")])]),e._v(" "),t("li",[t("strong",[e._v("映射到指定地址的指定端口")]),e._v("\n可以使用"),t("code",[e._v("ip:hostPort:containerPort")]),e._v("格式指定映射使用一个特定地址，比如localhost地址"),t("code",[e._v("127.0.0.1")]),e._v("：\n"),t("code",[e._v("docker run -itd -p 127.0.0.1:3000:3000 --name my_docker_ubuntu ubuntu:20.04")])]),e._v(" "),t("li",[t("strong",[e._v("映射到指定地址的任意端口")]),e._v("\n使用"),t("code",[e._v("ip::containerPort")]),e._v("绑定localhost的任意端口到容器的5000端口，本地主机会自动分配一个端口：\n"),t("code",[e._v("docker run -itd -p 127.0.0.1::5000 --name my_docker_ubuntu ubuntu:20.04")])]),e._v(" "),t("li",[t("strong",[e._v("查看映射端口配置")]),e._v("\n可以使用"),t("code",[e._v("docker port container")]),e._v("命令来查看当前映射的端口配置，也可以查看到绑定的地址。\n"),t("img",{attrs:{src:"https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/e8d0a51dd5a0440387a300ba4f84d0e3-20231125205502860-20231125205513041.png",alt:""}})])])])}),[],!1,null,null,null);t.default=s.exports}}]);