(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{434:function(s,t,a){"use strict";a.r(t);var e=a(0),n=Object(e.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"_1-git简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-git简介"}},[s._v("#")]),s._v(" 1 git简介")]),s._v(" "),t("h3",{attrs:{id:"_1-1-什么是版本控制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-什么是版本控制"}},[s._v("#")]),s._v(" 1.1 什么是版本控制")]),s._v(" "),t("p",[s._v("版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。 除了项目源代码，你可以对任何类型的文件进行版本控制。\n有了它你就可以将某个文件回溯到之前的状态，甚至将整个项目都回退到过去某个时间点的状态，你可以比较文件的变化细节，查出最后是谁修改了哪个地方，从而找出导致怪异问题出现的原因，又是谁在何时报告了某个功能缺陷等等。\n而版本控制系统（VCS）则是一种软件，可以帮助软件团队的开发人员协同工作，并存档他们工作的完整历史记录。\n目前版本控制系统有如下三种：")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("本地版本控制系统")]),s._v("：即通过用文件目录形式保存每个项目版本，其中目录名会备注一些版本信息、修改时间等。其最大的好处就是简单，但特别容易犯错，不利于管理，容易覆盖重要的文件，而且不适合协同工作。\n"),t("img",{attrs:{src:"https://img-blog.csdnimg.cn/f880a38e7ab74bb3b9a82c1d8a86b913.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdW5pcXVlX3B1cnN1aXQ=,size_19,color_FFFFFF,t_70,g_se,x_16",alt:""}})])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("集中式版本控制系统（Centralized Version Control Systems，CVCS）")]),s._v("：集中化的版本控制系统都有一个单一的集中管理的服务器，保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新。这么做虽然解决了本地版本控制系统无法让在不同系统上的开发者协同工作的诟病，但也还是存在下面的问题：如果中央服务器宕机，则其他人无法使用；必须联网才能工作。\n"),t("img",{attrs:{src:"https://img-blog.csdnimg.cn/a09a88d54b494b88802bb33feb135323.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdW5pcXVlX3B1cnN1aXQ=,size_19,color_FFFFFF,t_70,g_se,x_16",alt:""}})])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("分布式版本控制系统（Distributed Version Control Systems，DVCS）")]),s._v("：在这类系统中，像 Git、Mercurial、Bazaar 以及 Darcs 等，客户端并不只提取最新版本的文件快照， 而是把代码仓库完整地镜像下来，包括完整的历史记录。 这么一来，任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复。 因为每一次的克隆操作，实际上都是一次对代码仓库的完整备份。\n"),t("img",{attrs:{src:"https://img-blog.csdnimg.cn/a1591c22fce544fab36f8067605a6f0b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdW5pcXVlX3B1cnN1aXQ=,size_16,color_FFFFFF,t_70,g_se,x_16",alt:""}}),s._v("\n分布式版本控制系统可以不用联网就可以工作，因为每个人的电脑上都是完整的版本库，当你修改了某个文件后，你只需要将自己的修改推送给别人就可以了。但是，在实际使用分布式版本控制系统的时候，很少会直接进行推送修改，而是使用一台充当“中央服务器”的东西。这个服务器的作用仅仅是用来方便“交换”大家的修改，没有它大家也一样干活，只是交换修改不方便而已。\n分布式版本控制系统的优势不单是不必联网这么简单，后面我们还会看到 Git 极其强大的分支管理等功能。")])])]),s._v(" "),t("h3",{attrs:{id:"_1-2-什么是git"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-什么是git"}},[s._v("#")]),s._v(" 1.2 什么是git")]),s._v(" "),t("p",[s._v("Git是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。其是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。Git 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。\n官网地址为："),t("a",{attrs:{href:"https://git-scm.com/",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://git-scm.com/"),t("OutboundLink")],1),s._v("，在上面有权威的git介绍以及git下载地址。\nSVN是集中式版本控制系统，而Git是分布式版本控制系统，Git与SVN的区别可参考"),t("a",{attrs:{href:"https://blog.csdn.net/ThinkWon/article/details/101449611",target:"_blank",rel:"noopener noreferrer"}},[s._v("Git与SVN的区别"),t("OutboundLink")],1),s._v("。\ngit有以下优点：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("适合分布式开发，强调个体；公共服务器压力和数据量都不会太大；")])]),s._v(" "),t("li",[t("p",[s._v("速度快、灵活；")])]),s._v(" "),t("li",[t("p",[s._v("任意两个开发者之间可以很容易的解决冲突；")])]),s._v(" "),t("li",[t("p",[s._v("离线工作。")])])]),s._v(" "),t("h3",{attrs:{id:"_1-3-git的几个核心概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-git的几个核心概念"}},[s._v("#")]),s._v(" 1.3 git的几个核心概念")]),s._v(" "),t("ul",[t("li",[s._v("工作区（workspace）：仓库的目录。工作区是独立于各个分支的。在当前仓库中，新增，更改，删除文件这些动作，都发生在工作区里面。")]),s._v(" "),t("li",[s._v("暂存区（index/stage）：数据暂时存放的区域，类似于工作区写入版本库前的缓存区。暂存区是独立于各个分支的。一般存放在 .git 目录下的 index 文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。")]),s._v(" "),t("li",[s._v("版本库（Repository）：也可以叫仓库区，实际上就是我们的本地仓库。就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本")]),s._v(" "),t("li",[s._v("版本结构：树结构，树中每个节点代表一个代码版本。")]),s._v(" "),t("li",[s._v("远程仓库（Remote Repository）： 托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换。目前流行的远程仓库有：Github、Gitee。")])]),s._v(" "),t("h3",{attrs:{id:"_1-4-git工作流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-git工作流程"}},[s._v("#")]),s._v(" 1.4 git工作流程")]),s._v(" "),t("p",[s._v("一般工作流程如下：")]),s._v(" "),t("ul",[t("li",[s._v("从远程仓库中克隆 Git 资源作为本地仓库；")]),s._v(" "),t("li",[s._v("从本地仓库中checkout代码然后进行代码修改；")]),s._v(" "),t("li",[s._v("在提交本地仓库前先将代码提交到暂存区；")]),s._v(" "),t("li",[s._v("提交修改，提交到本地仓库；本地仓库中保存修改的各个历史版本；")]),s._v(" "),t("li",[s._v("在需要和团队成员共享代码时，可以将修改代码push到远程仓库。\n"),t("img",{attrs:{src:"https://img-blog.csdnimg.cn/6044ef4b970149a5ae8b3a3cb4d1339f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdW5pcXVlX3B1cnN1aXQ=,size_8,color_FFFFFF,t_70,g_se,x_16",alt:""}})])]),s._v(" "),t("h2",{attrs:{id:"_2-git安装配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-git安装配置"}},[s._v("#")]),s._v(" 2 git安装配置")]),s._v(" "),t("h3",{attrs:{id:"_2-1-windows平台安装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-windows平台安装"}},[s._v("#")]),s._v(" 2.1 windows平台安装")]),s._v(" "),t("p",[s._v("主要学linux，这里列出其他blog的windows平台安装教程："),t("a",{attrs:{href:"https://blog.csdn.net/u013295518/article/details/78746007#3windows%E4%B8%8B%E5%AE%89%E8%A3%85git",target:"_blank",rel:"noopener noreferrer"}},[s._v("安装教程"),t("OutboundLink")],1)]),s._v(" "),t("h3",{attrs:{id:"_2-2-linux平台安装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-linux平台安装"}},[s._v("#")]),s._v(" 2.2 Linux平台安装")]),s._v(" "),t("p",[s._v("首先，我们可以尝试着输入"),t("code",[s._v("git")]),s._v("，看看系统有没有安装Git：")]),s._v(" "),t("div",{staticClass:"language-powershell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-powershell"}},[t("code",[s._v("$ git\nThe program "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'git'")]),s._v(" is currently not installed"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" You can install it by typing:\nsudo apt-get install git\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")]),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("如果出现这个，则说明Git还没有安装，如果我们使用得是Debian或者Ubuntu Linux，通过命令："),t("code",[s._v("sudo apt-get install git")]),s._v("就可以直接完成Git的安装，非常简单。")]),s._v(" "),t("h3",{attrs:{id:"_2-3-mac平台安装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-mac平台安装"}},[s._v("#")]),s._v(" 2.3 Mac平台安装")]),s._v(" "),t("p",[s._v("主要学linux，这里列出其他blog的Mac平台安装配置教程："),t("a",{attrs:{href:"https://blog.csdn.net/u013295518/article/details/78746007#3windows%E4%B8%8B%E5%AE%89%E8%A3%85git",target:"_blank",rel:"noopener noreferrer"}},[s._v("安装配置教程"),t("OutboundLink")],1)]),s._v(" "),t("h3",{attrs:{id:"_2-4-配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-配置"}},[s._v("#")]),s._v(" 2.4 配置")]),s._v(" "),t("p",[s._v("安装好git之后，就需要对git进行配置操作了，需要配置自己的用户名和Email。配置的命令如下：")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--global")]),s._v(" user.name "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"用户名"')]),s._v("\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--global")]),s._v(" user.email "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"邮箱"')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")]),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("如果你需要检查你的配置信息，可以使用"),t("code",[s._v("git config --list")]),s._v("命令来列出所有配置信息：\n"),t("img",{attrs:{src:"https://img-blog.csdnimg.cn/de917787862a490fb51e48830453beb9.png",alt:""}})]),s._v(" "),t("h2",{attrs:{id:"_3-git基本命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-git基本命令"}},[s._v("#")]),s._v(" 3 git基本命令")]),s._v(" "),t("h3",{attrs:{id:"_3-1-建立本地仓库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-建立本地仓库"}},[s._v("#")]),s._v(" 3.1 建立本地仓库")]),s._v(" "),t("p",[s._v("(1). 创建一个目录，并将其初始化为本地仓库\n"),t("code",[s._v("git init 本地仓库名")]),s._v("\n(2). 使用当前目录作为本地仓库\n"),t("code",[s._v("git init")]),s._v("\n(3). 将远程仓库克隆下来作为本地仓库\n此命令支持多种协议，但我一般是通过SSH协议，其内部实现是通过SSH，所以进行这步操作之前我们需要确保在远程仓库添加了SSH公钥，如果没有添加需要在本地主机通过"),t("code",[s._v("ssh-keygen")]),s._v("，然后会生成ssh公钥和密钥，我们将公钥添加到远程仓库即可。\n"),t("code",[s._v("git clone git@服务器名:仓库路径")]),s._v("\n该格式和"),t("code",[s._v("scp")]),s._v("命令一致，@前面表示用户名，这个一般都是git，后面表示服务器名，可以是IP地址，也可以是域名，例如"),t("code",[s._v("github.com")]),s._v("，"),t("code",[s._v(":")]),s._v("后面表示仓库路径。不过不需要担心，这个远程仓库会给出。\n"),t("img",{attrs:{src:"https://img-blog.csdnimg.cn/a1f6c8442257431eb80d0e3cc8b8b12a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdW5pcXVlX3B1cnN1aXQ=,size_12,color_FFFFFF,t_70,g_se,x_16",alt:""}})]),s._v(" "),t("h3",{attrs:{id:"_3-2-提交、修改和删除"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-提交、修改和删除"}},[s._v("#")]),s._v(" 3.2 提交、修改和删除")]),s._v(" "),t("p",[s._v("(1). 将文件提交到暂存区")]),s._v(" "),t("div",{staticClass:"language-powershell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-powershell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将指定文件添加到暂存区")]),s._v("\ngit add file1 file2 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" fileN \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将指定目录添加到暂存区")]),s._v("\ngit add dir1 dir2 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" dirN\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 添加当前目录下的所有文件到暂存区")]),s._v("\ngit add "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")]),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("(2). 将文件从暂存区中撤出，但不会撤销文件的更改\n"),t("code",[s._v("git restore --staged")]),s._v("\n(3). 将不在暂存区的文件撤销更改，需要和(2)作区分，两者作用完全不一样。")]),s._v(" "),t("div",{staticClass:"language-powershell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-powershell"}},[t("code",[s._v("git restore file\n或\ngit checkout "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v(" file\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")]),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("(4). 比较暂存区和工作区文件之间的差异")]),s._v(" "),t("div",{staticClass:"language-powershell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-powershell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 显示暂存区和工作区之间的差异")]),s._v("\ngit "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("diff")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("[file]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 显示暂存区和上一次提交的差异")]),s._v("\ngit "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("diff")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("cached "),t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("[file]")]),s._v("\n或\ngit "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("diff")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("staged "),t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("[file]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 显示两次提交的差异")]),s._v("\n \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")]),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("该file可以省略，如果省略，则是比较暂存区中的所有文件。注意，如果暂存区没有内容，则是比较"),t("code",[s._v("HEAD")]),s._v("指针指向的版本库内容。\n(5). 查看仓库状态\n"),t("code",[s._v("git status")]),s._v("\n该命令用于查看在你上次提交之后是否有对文件进行再次修改，如果我们需要获取简短的输出结果，可添加"),t("code",[s._v("-s")]),s._v("参数来实现。\n(6). 提交暂存区内容到本地仓库\n暂存区的内容可以通过"),t("code",[s._v("git commit")]),s._v("来提交到本地仓库。\n"),t("code",[s._v("git commit [file1] [file2]...[fileN] -m [备注信息]")]),s._v("\n其中file1等是可以直接省略的，如果意味着提交所有信息，而"),t("code",[s._v("-m")]),s._v("是参数，后面接备注信息。当然，在进行"),t("code",[s._v("git commit")]),s._v("之前，我们需要通过"),t("code",[s._v("git add")]),s._v("命令将修改添加到暂存区。\n(7). 回退版本\n我们可以通过"),t("code",[s._v("git reset")]),s._v("命令来回退版本，可以指定退回某一次提交的版本。具体如下：")]),s._v(" "),t("div",{staticClass:"language-powershell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-powershell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将代码库回退到上一个版本")]),s._v("\ngit reset "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("hard HEAD^ \n或\ngit reset "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("hard HEAD~\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 向上回滚两次，一次类推")]),s._v("\ngit reset "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("hard HEAD^^\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 向上回滚n次。")]),s._v("\ngit rest "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("hard HEAD~n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 回滚到某一特定版本，用版本号实现，版本号唯一标识一个版本")]),s._v("\ngit reset "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("hard 版本号\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")]),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("p",[s._v("(8). 删除文件\n在Git中，删除文件也是一种修改操作，删除文件有三种形式：")]),s._v(" "),t("blockquote",[t("p",[s._v("利用"),t("code",[s._v("rm file")]),s._v("实现删除，此形式只是会删除工作区的文件，并没有删除版本库的文件，如果还需要删除版本库的文件还需要执行下列命令，这样就可以实现工作区和版本库的文件：")])]),s._v(" "),t("div",{staticClass:"language-powershell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-powershell"}},[t("code",[s._v("git add file "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 加入暂存区")]),s._v("\ngit commit "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("m  "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"delete file"')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")]),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("blockquote",[t("p",[s._v("利用"),t("code",[s._v("git rm file")]),s._v("实现删除，会删除工作区的文件，并且将此次删除加入暂存区。但需要注意要删除的文件是没有修改过的，如果需要删除修改过的，需要加入"),t("code",[s._v("-f")]),s._v("，当然，这个时候我们也还没有删除版本库的文件，只是我们只需要执行"),t("code",[s._v('git commit -m "delete file"')]),s._v("就可以。")])]),s._v(" "),t("p",[s._v("利用"),t("code",[s._v("git rm --cached file")]),s._v("实现删除，只会删除暂存区的文件，但会保留工作区的文件，并且会将这次删除放入暂存区，然后我们执行"),t("code",[s._v('git commit -m "delete file"')]),s._v("就可以实现删除暂存区和版本库的文件。\n(9). 移动或者重命名文件\n"),t("code",[s._v("git mv [file] [newFile]")]),s._v("可以用来移动或者重命名一个文件、目录或者软连接。如果新文件名已经存在，还需要添加"),t("code",[s._v("-f")]),s._v("参数。")]),s._v(" "),t("h3",{attrs:{id:"_3-3-查看日志"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-查看日志"}},[s._v("#")]),s._v(" 3.3 查看日志")]),s._v(" "),t("p",[s._v("(1). 查看当前分支的所有版本\n"),t("code",[s._v("git log")]),s._v("，我们可以用这个命令历史提交记录，当然这个命令还有许多参数供我们使用：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("--oneline")]),s._v("：查看历史记录的简洁版本。")]),s._v(" "),t("li",[t("code",[s._v("--graph")]),s._v("：查看历史中什么时候出现了分支、合并。开启拓扑图选项。")]),s._v(" "),t("li",[t("code",[s._v("--reverse")]),s._v("：逆向显示所有日志。")]),s._v(" "),t("li",[t("code",[s._v("--author=user")]),s._v("：指定查看user提交的部分。")]),s._v(" "),t("li",[t("code",[s._v("--since、--before、--after")]),s._v("等：指定日期。\n(2). 查看HEAD指针的移动历史（包括被回滚的版本）\n"),t("code",[s._v("git reflog")])])]),s._v(" "),t("h3",{attrs:{id:"_3-4-分支管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-分支管理"}},[s._v("#")]),s._v(" 3.4 分支管理")]),s._v(" "),t("p",[s._v("几乎每一种版本控制系统都以某种形式支持分支。使用分支意味着你可以从开发主线上分离开来，然后在不影响主线的同时继续工作。\n有人把 Git 的分支模型称为必杀技特性，而正是因为它，将 Git 从版本控制系统家族里区分出来。\n(1).  创建分支\n"),t("code",[s._v("git branch (branchName)")]),s._v("\n(2). 切换分支\n"),t("code",[s._v("git checkout (branchName)")]),s._v("\n当你切换分支的时候，Git 会用该分支的最后提交的快照替换你的工作目录的内容， 所以多个分支不需要多个目录。\n添加"),t("code",[s._v("-b")]),s._v("参数可以创建并切换分支。\n(3). 合并分支\n"),t("code",[s._v("git merge (branchName)")]),s._v("\n将branch_name合并到当前分支上。\n(4) 删除分支\n"),t("code",[s._v("git branch -d (branchName)")]),s._v("\n删除本地仓库的"),t("code",[s._v("branchName")]),s._v("分支。\n(5). 列出分支\n"),t("code",[s._v("git branch")]),s._v("\n没有参数时，"),t("code",[s._v("git branch")]),s._v("会列出你在本地的分支。\n(6). 合并冲突\n合并并不仅仅是简单的文件添加、移除的操作。Git也会合并修改，当两个分支对同一个文件都进行了修改，那么就会产生合并冲突，我们需要去手动修改它。然后需要使用"),t("code",[s._v("git add")]),s._v("命令来告诉Git冲突已经解决了。")]),s._v(" "),t("h3",{attrs:{id:"_3-5-远程操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-远程操作"}},[s._v("#")]),s._v(" 3.5 远程操作")]),s._v(" "),t("p",[s._v("(1). 将本地仓库关联到远程仓库\n"),t("code",[s._v("git remote add [short-name] [url]")]),s._v("\n其中"),t("code",[s._v("short-name")]),s._v("指定一个方便使用的简写，为远程仓库的别名。例如"),t("code",[s._v("git remote add origin git@git.acwing.com:unique_pursuit/test.git")]),s._v("即可添加远程仓库。\n(2). 查看当前配置有哪些远程库\n"),t("code",[s._v("git remote")]),s._v("\n执行时添加上"),t("code",[s._v("-v")]),s._v("参数可查看到每个别名的实际链接地址。\n(3). 删除远程仓库\n"),t("code",[s._v("git remote rm name")]),s._v("\n其中name为仓库的别名。\n(4). 修改仓库名\n"),t("code",[s._v("git remote rename old_name new_name")]),s._v("\n(5). 查看主机的详细信息\n"),t("code",[s._v("git remote \tshow <主机名>")]),s._v("\n(6) 设置本地分支与远程仓库分支对应\n"),t("code",[s._v("git push --set-upstream <远程主机名> <branchName>")]),s._v("\n设置本地的"),t("code",[s._v("branchName")]),s._v("分支对应远程仓库的"),t("code",[s._v("branchName")]),s._v("分支，远程主机名为"),t("code",[s._v("git clone")]),s._v("设置的仓库别名。\n"),t("code",[s._v("git branch --set-upstream-to=origin/branchName1 branchName2")]),s._v("\n将远程仓库的branchName1分支与本地的branchName2分支对应。\n(7). 将本地当前分支推送到远程主机\n"),t("code",[s._v("git push <远程主机名> <本地分支名>:<远程分支名>")]),s._v("\n如果本地分支名和远程分支名相同，则可以直接使用下面的命令。\n"),t("code",[s._v("git push <远程主机名> <branchName>")]),s._v("\n将本地的"),t("code",[s._v("branchName")]),s._v("分支推到远程仓库，在此之前需要先设置与远程仓库对应分支。\n如果当前分支与多个主机存在追踪关系，需要使用"),t("code",[s._v("-u")]),s._v("参数指定一个默认主机，这样后面可以不加任何参数使用"),t("code",[s._v("git push")]),s._v("。\n(8). 删除远程仓库的"),t("code",[s._v("branchName")]),s._v("分支\n"),t("code",[s._v("git push -d <远程主机名> branchName")]),s._v("\n(9). 将远程仓库的分支与本地仓库的分支合并\n"),t("code",[s._v("git pull <远程主机名> <远程分支名>:<本地分支名>")]),s._v("\n如果本地分支名和远程分支名相同，则可以使用下面的命令。\n"),t("code",[s._v("git push <远程分支名> <branchName>")])]),s._v(" "),t("h3",{attrs:{id:"_3-6-保存和恢复进度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-保存和恢复进度"}},[s._v("#")]),s._v(" 3.6 保存和恢复进度")]),s._v(" "),t("p",[s._v("我们有时会遇到这样的情况，正在dev分支开发新功能，做到一半时有人过来反馈一个bug，让马上解决，但是新功能做到了一半你又不想提交，又想保存它，这个时候就可以使用"),t("code",[s._v("git stash")]),s._v("命令先把进度保存起来。\n(1). 保存当前工作进度\n"),t("code",[s._v("git stash")]),s._v("\n将工作区和暂存区尚未提交的修改存入栈中。再运行"),t("code",[s._v("git status")]),s._v("可以发现是一个干净的工作区，没有任何改动。使用"),t("code",[s._v("git stash save 'message'")]),s._v("可以添加一些注释\n(2). 恢复工作进度\n恢复最新的进度到工作区。git会默认把工作区和暂存区的改动都恢复到工作区。\n"),t("code",[s._v("git stash pop")]),s._v("\n恢复最新的进度到工作区和暂存区。\n"),t("code",[s._v("git stash pop --index")]),s._v("\n恢复指定的进度到工作区。\n"),t("code",[s._v("git stash pop stash_id")]),s._v("\n其中stash_id是通过"),t("code",[s._v("git stash list")]),s._v("获取的。\n通过"),t("code",[s._v("git stash pop")]),s._v("恢复进度后，会删除当前进度。\n还有一个"),t("code",[s._v("git stash apply")]),s._v("命令除了不删除进度，其他和"),t("code",[s._v("git stash pop")]),s._v("一样。\n(3). 显示保存进度的列表\n"),t("code",[s._v("git stash list")]),s._v("\n(4) 删除进度\n删除所有进度\n"),t("code",[s._v("git stash clear")]),s._v("\n删除一个存储的进度，如果不指定stash_id，则默认删除最新的进度。\n"),t("code",[s._v("git stash drop [stash_id]")])]),s._v(" "),t("h2",{attrs:{id:"_4-git用法思维导图"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-git用法思维导图"}},[s._v("#")]),s._v(" 4 Git用法思维导图")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/image-20231124095105416.png",alt:"image-20231124095105416"}})])])}),[],!1,null,null,null);t.default=n.exports}}]);