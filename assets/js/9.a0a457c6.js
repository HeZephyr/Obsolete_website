(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{334:function(t,a,s){"use strict";s.r(a);var e=s(4),n=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"_1-位运算概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-位运算概述"}},[t._v("#")]),t._v(" 1 位运算概述")]),t._v(" "),a("p",[t._v("我们知道，==计算机中的数在内存中都是以二进制形式进行存储的== ，而位运算就是直接对整数在内存中的二进制位进行操作，因此其执行效率非常高，在程序中尽量使用位运算进行操作，这会大大提高程序的性能。\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/b5549384f946425c91578cf7083e67ec.png",alt:"在这里插入图片描述"}})]),t._v(" "),a("p",[t._v("那么，涉及位运算的运算符如下表所示：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("符号")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("描述")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("运算规则")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("实例（以四位二进制数为例）")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("&")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("与")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("两个位都为1时，结果才为1。")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("$0001&0001=1,0001&0000=0,0000&0000=0000$")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("|")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("或")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("两个位都为0时，结果才为0。")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("$0001|0001=0001,0001|0000=0001,0000|0000=0000$")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("^")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("异或")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("两个位相同为0，相异为1。")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("$0001 \\wedge0001=0000,0001\\wedge0000=1,0000\\wedge 0000=0$")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("~")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("取反")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("0变1，1变0。")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("$\\sim0=1,\\sim 1 = 0$")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("<<")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("左移")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("各二进位全部左移若干位，高位丢弃，低位补0。")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("$0001<<k=0100，k=2$，$k$是左移的位数，这里$k=2$")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v(">>")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("右移")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("各二进位全部右移若干位，对无符号数，高位补0，有符号数，右移补$1$。")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("$0100>>k=0001，k=2$，$k$是右移的位数，这里$k=2$")])])])]),t._v(" "),a("p",[t._v("看完，你可能会觉得挺简单的，==但位运算的难点并不在这，而在于其性质、高级操作和它的应用。==")]),t._v(" "),a("h2",{attrs:{id:"_2-位运算的性质"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-位运算的性质"}},[t._v("#")]),t._v(" 2 位运算的性质")]),t._v(" "),a("h3",{attrs:{id:"_2-1-运算符的优先级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-运算符的优先级"}},[t._v("#")]),t._v(" 2.1 运算符的优先级")]),t._v(" "),a("p",[t._v("优先级需要弄清楚，如果不太清楚可以加小括号确保是想要的运算顺序，==这里只是相对优先级，即只是和一些常用的算术运算符做比较。==")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("优先级")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("运算符")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("结合方向")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("$-（符号运算符）,\\sim（取反运算符）， ++（自增），--（自减）$")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("==从右到左==")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("2")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("$*（乘）,/（除）,%（取余）$")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("从左到右")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("3")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("$+（加）,-（减）$")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("从左到右")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("4")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("$<<（左移），>>（右移）$")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("从左到右")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("5")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("$>（大于）,<(小于),>=(大于等于),<=(小于等于)$")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("从左到右")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("6")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("$==(等于),!=（不等于）$")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("从左到右")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("7")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("$&（按位与）$")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("从左到右")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("8")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("$\\wedge (按位异或)$")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("从左到右")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("9")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("$|(按位或)$")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("从左到右")])])])]),t._v(" "),a("h3",{attrs:{id:"_2-2-位运算符的运算律"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-位运算符的运算律"}},[t._v("#")]),t._v(" 2.2 位运算符的运算律")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("公式名称")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("运算规则")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("交换律")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("$A&B=B&A ,A\\wedge B=B\\wedge A$")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("结合律（注意结合律只能在同符号下进行）")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("$(A&B)&C=A&(B&C)$")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("等幂律")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("$A&A=A，A|A=A$")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("零律")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("$A&0=0$")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("互补律（注意，这不同于逻辑运算）")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("$A&\\sim A=0,A|\\sim A=-1$")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("同一律")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("$A|0=A，A\\wedge 0 =A$")])])])]),t._v(" "),a("p",[t._v("以上仅为已证明的运算律（可能存在遗漏），其余的博主均认为是不符合不成立的，==注意：千万不要将逻辑运算的运算律或者其他的运算律与这混为一谈。==")]),t._v(" "),a("h2",{attrs:{id:"_3-位运算高级操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-位运算高级操作"}},[t._v("#")]),t._v(" 3 位运算高级操作")]),t._v(" "),a("p",[t._v("如下表，请读者认真阅读理解，在阅读的过程中可以对示例进行运算。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("功能")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("示例")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("位运算")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("去掉最后一位")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("$0100->0010$")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("$x>>1$")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("在最后加一个$0$")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("$0100->1000$")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("$x<<1$")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("在最后加一个1")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("$0100->1001$")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("$(x<<1)+1$")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("将最后一位变为$1$")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("$0100->0101$")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("$x|1$")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("将最后一位变为$0$")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("$0101->0100$，这里实际上就是先确保最低位变为$1$，再减去$1$。")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("$(x|1)-1$")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("最后一位取反")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("$0100->0101$ ，利用异或性质，其中除最后一位其余不变。")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("$x\\wedge1$")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("把右数的第$k$位变为$1$")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("$0001->1001,k=4$")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("$x|(1<<(k-1))$")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("把右数的第$k$位变为$0$")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("$1001->0001,k=4$，这个操作实际上就是先得到了$1000$，然后取反得到$0111$，最后利用按位与的性质其余位不变，最高位为$0$")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("$x&(\\sim(1<<(k-1)))$")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("把右数的第$k$位取反")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("$1000->0000,k=4$，利用异或性质")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("$x\\wedge (1<<(k-1))$")])])])]),t._v(" "),a("p",[t._v("由于表长限制，这里接下表继续：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("功能")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("示例")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("位运算")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("取末$k$位")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("$1011->0011,k=2$")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("$x&((1<<k)-1)$")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("取右数的第$k$位")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("$1011->0001,k=4$，右移$k-1$位则是去掉了最后的$k-1$位，我们利用按位与即可将其提取出来")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("$x>>(k-1)&1$")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("把末$k$位全变为$1$")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("$1000->1111,k=3$")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("$x|((1<<k)-1)$")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("把末$k$位取反")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("$0101->1010,k=4$")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("$x\\wedge ((1<<k)-1)$")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("把右边连续的$1$变为$0$")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("$0111->0000$ ，注意是右起连续的$1$")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("$x&(x+1)$")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("把右起的第一个$0$变为$1$")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("$0011->0111$")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("$x|(x+1)$")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("把右起连续的$0$变为$1$")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("$1000->1111$，注意是右起连续的$0$")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("$x|(x-1)$")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("取右边连续的$1$")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("$1011->0011$")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("$(x\\wedge (x+1))>>1$")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("去掉右起的第一个$1$的左边")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("$1101->0001$")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("$x&(x\\wedge (x-1))$")])])])]),t._v(" "),a("p",[t._v("当然，这里只是一些常用的，并不是全部，位运算的神奇远不止于此。")]),t._v(" "),a("h2",{attrs:{id:"_4-负数的位运算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-负数的位运算"}},[t._v("#")]),t._v(" 4 负数的位运算")]),t._v(" "),a("p",[t._v("首先，我们要知道，在计算机中，运算是使用的二进制补码，而正数的补码是它本身，==负数的补码则是符号位不变，其余按位取反，最后再$+1$得到的，== 例如：")]),t._v(" "),a("p",[t._v("$15$,原码:$00001111\\space$补码:$00001111$")]),t._v(" "),a("p",[t._v("$-15$,原码:$10001111\\space$补码:$11110001$")]),t._v(" "),a("p",[t._v("那么对于负数的位运算而言，它们的操作都是建立在补码上的，得到的运算结果是补码，最后将补码结果转化成一个普通的十进制数结果。但需要注意的是，符号位是需要参与运算的，而在左移右移操作中，负数右移补$1$，左移右边补$0$。例如对于$-15$，其补码为$11110001,$右移一位$(-15>>1)$得到的是$11111000$，即$-8$，其他的同理。")]),t._v(" "),a("p",[t._v("这里我们介绍几个特殊的性质：")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("快速判断是否为$-1$")])]),t._v(" "),a("p",[t._v("在链式前向星中，我们初始化$head$数组为$-1$，最后判断是否遍历完$u$的所有边时，即判断$i$是否为$-1$，我们直接用$\\sim i$即可。原因就在于$-1$的补码是$11111111$，按位取反就变为$00000000$，这实际上就是$0$。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("取最低位的$1$，lowbit函数")])]),t._v(" "),a("p",[t._v("也就是$x&(-x)$，这在树状数组中起着巨大作用，这里指路一篇树状数组讲解$blog$:"),a("a",{attrs:{href:"https://blog.csdn.net/hzf0701/article/details/116208699?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162212420516780264027190%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=162212420516780264027190&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-1-116208699.nonecase&utm_term=%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84&spm=1018.2226.3001.4450",target:"_blank",rel:"noopener noreferrer"}},[t._v("点这里"),a("OutboundLink")],1),t._v("，我们来证明一下，这里取$x=15$，对于$15&(-15)$，我们知道，在补码上进行运算得到的是$00000001$，需要注意二元运算的符号位我们需要进行运算。")])])]),t._v(" "),a("h2",{attrs:{id:"_5-位运算的一些应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-位运算的一些应用"}},[t._v("#")]),t._v(" 5 位运算的一些应用")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("位运算实现乘除法")])]),t._v(" "),a("blockquote",[a("p",[t._v("将$x$左移一位实现$\\times 2$，将$x$右移一位实现$\\div2$。")]),t._v(" "),a("p",[t._v("$a<<1 \\equiv a*2$")]),t._v(" "),a("p",[t._v("$a >>1 \\equiv a/2$")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("位运算交换两整数")])])])]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("swap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^=")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^=")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("这效率非常高，我们来剖析其原理，对于$a=a\\wedge b$，则$b = b\\wedge(a\\wedge b)$，根据交换律以及异或性质，得$b=b\\wedge b\\wedge a=0\\wedge a=a$，同理$a=(a\\wedge b)\\wedge a=0\\wedge b=b$。这样就实现了交换操作。")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("位运算判断奇偶数")])]),t._v(" "),a("blockquote",[a("p",[t._v("我们知道，在二进制中，最低位决定了是奇数还是偶数，所以我们可以提取出最低位的值，即与$1$相与即可实现目的，为$0$则是偶数，为$1$则是奇数。")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("位运算改变正负性和求绝对值")])])])]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("change")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("对于正数而言，补码就是原码，所以按位取反再$+1$则得到对应真值负数的补码，而对于负数，其补码进行按位取反再$+1$则得到对应真值正数的补码，变为原码。那么知道这个我们就可以特判是否为负数 ==（这里通过右移$31$位，若为正数，则得到的是$0$，若为负数，则得到的是$-1$，而$0$的补码为$0000$,$-1$的补码为$1111$，"),a("s",[t._v("根据异或性质即可判断")]),t._v("感谢读者\n（恢。）指出错误，这里应该是要进行按位取反操作，这样如果为负数判断结果才为0\n。）==  ，利用条件表达式就可以根据判断结果求绝对值了。如下：")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("abs")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("31")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("ul",[a("li",[a("strong",[t._v("位运算实现对$p$取余（p为$2^k$）")])])]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mod")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("取余实际上就是舍去大于等于$p$的位数，所以我们只需要保留在$p$范围内的数。由于我们限定了$p$为$2^k$，所以$(p - 1)$一定是将小于$p$的最高位全部变为了$1$，这样再进行与操作即可得到余数。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("位运算统计二进制数$1$的个数")])])]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" cnt "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        cnt "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" cnt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("p",[t._v("对于任意的$x$，转换成二进制后，是形如这样的数字：$aa...aa10...00$，从右向左数有任意多个$0$，直到遇见第一个$1$，字母$a$用来占位，代表$1$左边的任意数字。$x-1$转换成二进制后，是形如这样的数字：$aa...aa01...11$，从右向左数，原来的任意多个$0$都变成$1$，原来的第一个$1$，变成$0$，字母$a$部分不变。对$x$ 和 $x-1$ 进行 按位与 计算，会得到：$aa...aa00...00$，从右向左数，原来的第一个$1$变成了$0$，字母a部分不变。所以 $x & (x-1)$相当于消除了 $x$ 从右向左数遇到的第一个$1$。那么，$x$转换成二进制后包含多少个$1$，count函数里的循环就会进行多少次，直到$x$所有的$1$都被“消除”。")]),t._v(" "),a("h2",{attrs:{id:"_6-位运算例题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-位运算例题"}},[t._v("#")]),t._v(" 6 位运算例题")]),t._v(" "),a("h3",{attrs:{id:"_6-1-更新二进制位"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-更新二进制位"}},[t._v("#")]),t._v(" 6.1 更新二进制位")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("题面")])]),t._v(" "),a("blockquote",[a("p",[t._v("给出两个32位的整数N和M，以及两个二进制位的位置i和j。写一个方法来使得N中的第i到j位等于M（M会是N中从第i为开始到第j位的子串）")]),t._v(" "),a("p",[t._v("样例：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("输入: N=(10000000000)2 M=(10101)2 i=2 j=6\n输出: N=(10001010100)2\n输入: N=(10000000000)2 M=(11111)2 i=2 j=6\n输出: N=(10001111100)2\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("解题思路")])]),t._v(" "),a("p",[t._v("结合所学，我们的思路应该就是先将第$i$位到第$j$位全部变为$0$，再将与左移$i$位的$M$进行或操作。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("AC代码")])])])]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("updateBits")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 循环遍历从第 i 位到第 j 位")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" pos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" pos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" pos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将 n 的第 pos 位设为 0")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ~(1 << pos) 创建一个在第 pos 位为 0 其他位为 1 的掩码")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 然后使用按位与运算符（&）来将 n 的第 pos 位设置为 0")]),t._v("\n        \tn "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" pos"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将 m 左移 i 位，使 m 的低位对齐到 n 的第 i 位")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 然后使用按位或运算符（|）合并 n 和 m")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这样 n 的第 i 到第 j 位就被 m 的相应位所替换")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br")])]),a("h3",{attrs:{id:"_6-2-a-b问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-a-b问题"}},[t._v("#")]),t._v(" 6.2 A+B问题")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("题面")])]),t._v(" "),a("blockquote",[a("p",[t._v("给出两个整数 a 和 b , 求他们的和并以整数（int）的形式返回。"),a("strong",[t._v("不能使用")]),t._v(" "),a("strong",[t._v("+ 等数学运算符。")])]),t._v(" "),a("p",[t._v("样例：")]),t._v(" "),a("p",[t._v("输入：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("a = 1\nb = 2\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("输出：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("3\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("输入：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("a = -1\nb = 1\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("输出：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("0\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("解题思路")])]),t._v(" "),a("p",[t._v("这题我们可以利用异或操作来实现，因为异或操作有一个别名叫不进位加法。那么进位操作我们实际上就可以通过$a&b$来实现，因为$a&b$得到的都是$a$和$b$上都有的$1$，我们再左移即得到的是进位之后的结果，所以$a+b=(a\\wedge b)+(a&b<<1)$。通过这样模拟竖式加法操作即可。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("AC代码")])])])]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("aplusb")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当没有进位需要处理时循环结束")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// temp_a 存储 a 和 b 的按位异或结果，这相当于不带进位的加法")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" temp_a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// temp_b 存储 a 和 b 的按位与结果并左移一位，这相当于计算进位")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 因为只有两个位都是1时才会产生进位")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" temp_b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 更新 a 为不带进位的加法结果")]),t._v("\n            a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" temp_a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 更新 b 为进位")]),t._v("\n            b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" temp_b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当没有进位时，a 中存储了最终结果，返回 a")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br")])]),a("h3",{attrs:{id:"_6-3-o-1-时间检测2的幂次"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-o-1-时间检测2的幂次"}},[t._v("#")]),t._v(" 6.3 O(1)时间检测2的幂次")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("题面")])]),t._v(" "),a("blockquote",[a("p",[t._v("用 O("),a("em",[t._v("1")]),t._v(") 时间检测整数 "),a("em",[t._v("n")]),t._v(" 是否是 "),a("em",[t._v("2")]),t._v(" 的幂次。")]),t._v(" "),a("p",[t._v("样例")]),t._v(" "),a("p",[a("code",[t._v("n=4")]),t._v("，返回 "),a("code",[t._v("true")]),t._v(";")]),t._v(" "),a("p",[a("code",[t._v("n=5")]),t._v("，返回 "),a("code",[t._v("false")]),t._v(".")]),t._v(" "),a("p",[t._v("挑战")]),t._v(" "),a("p",[t._v("O("),a("em",[t._v("1")]),t._v(") 时间复杂度")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("解题思路")])]),t._v(" "),a("p",[t._v("首先我们知道$2^k$是大于$0$的，这里我们需要特判，同理，$2^k$的二进制表示中只有$1$个$1$，故我们可以利用$x&(x-1)$来消除唯一的$1$判断是否等于$0$即可。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("AC代码")])])])]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("checkPowerOf2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 检查 n 是否大于 0")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2 的幂必须是正数，因为 0 和负数都不是 2 的幂")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 检查 n 和 n - 1 的按位与操作是否为 0")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果 n 是 2 的幂，则其二进制表示中只有一个 1")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 例如 2 (10), 4 (100), 8 (1000)")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当 n 是 2 的幂时，n - 1 的二进制表示是 n 的最高位 1 变为 0，")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 其余位从 0 变为 1，例如 2 (10) - 1 = 1 (01), 4 (100) - 1 = 3 (011)")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 因此 n & (n - 1) 将得到 0")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br")])])])}),[],!1,null,null,null);a.default=n.exports}}]);